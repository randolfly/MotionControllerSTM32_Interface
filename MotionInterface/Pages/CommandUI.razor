@page "/CommandUI"
@using MotionInterface.Lib.Model
@using MotionInterface.Lib.Service
@using MotionInterface.Lib.Util

@inject CommandCommunicationService CommandCommunicationService

<MContainer Fluid Class="fill-height">
<MRow Style="min-height:200px">
    <MCol Cols="12" Sm="6">
        <MCard Class="fill-height" Style="height:400px;overflow-y:scroll">
            <MCardTitle>Receive Frames</MCardTitle>
            <FramesList @ref="_receiveFramesList"
                        ShowFramesList="CommandCommunicationService.ReceivedProtocolFrameList"/>
        </MCard>
    </MCol>
    <MCol Cols="12" Sm="6">
        <MCard Class="fill-height" Style="height:400px;overflow-y:scroll">
            <MCardTitle>Send Frames</MCardTitle>
            <FramesList @ref="_sendFramesList"
                        ShowFramesList="CommandCommunicationService.SendProtocolFrameList"/>
        </MCard>
    </MCol>
</MRow>

<MRow NoGutters Style="margin-top: 10px;">
    <MCol Cols="1" Style="display: flex;justify-content:space-around">
        <MButton Icon Color="@PortStatusLed" OnClick="ToggleSerialPort">
            <MIcon>mdi-power</MIcon>
        </MButton>
    </MCol>
    <MCol Cols="4" Align="AlignTypes.Start">
        <MAutocomplete @bind-Value="ProtocolFrame.Command"
                       Items="Enum.GetValues(typeof(ProtocolCommand))
                           .Cast<ProtocolCommand>().ToList()"
                       ItemText="r=>r.ToString()" 
                       ItemValue="r=>r"
                       Dense Solo
                       HideNoData HideSelected 
                       Placeholder="Start typing to Search" Label="Command"/>
    </MCol>
    <MCol Align="AlignTypes.Start">
        <MTextField @bind-Value="ParamDataString" Dense Solo
                    Label="Limit Input">
        </MTextField>
    </MCol>
    <MCol Cols="1" Style="display: flex;justify-content:space-around">
        <MButton Icon Color="indigo" OnClick="SendProtocolFrame">
            <MIcon>mdi-send</MIcon>
        </MButton>
    </MCol>
</MRow>
</MContainer>


@code {
    private ProtocolFrame ProtocolFrame { get; set; } = new();

    private string ParamDataString { get; set; } = string.Empty;

    private string PortStatusLed => CommandCommunicationService.IsPortOpen ? "green" : "red";

    private FramesList _sendFramesList, _receiveFramesList;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var invocationList = CommandCommunicationService.OnParseFrameDataAction?
            .GetInvocationList();
        if (invocationList == null || !invocationList.Contains(UpdateSendFramesUi))
        {
            CommandCommunicationService.OnParseFrameDataAction += UpdateSendFramesUi;
        }
    }

    private void UpdateSendFramesUi(ProtocolFrame protocolFrame)
    {
        // update received frames
        InvokeAsync(() => _receiveFramesList.ScrollToBottom());
        InvokeAsync(() => _sendFramesList.ScrollToBottom());
        InvokeAsync(StateHasChanged);
    }

    private void SendProtocolFrame()
    {
        if (ParamDataString.Length > 0)
        {
            // command head validation
            if (ProtocolFrame.Command == ProtocolCommand.SendStateIdCmd)
            {
                ProtocolFrame.ParamData = ParamDataString.NameStringToByteArray();
            }
            else
            {
                ProtocolFrame.ParamData = ParamDataString.FloatStringToByteArray();
            }
        }
        CommandCommunicationService.SendFrameData(ProtocolFrame); 
        InvokeAsync(() => _sendFramesList.ScrollToBottom());
        InvokeAsync(StateHasChanged);
    }

    private void ToggleSerialPort()
    {
        if (CommandCommunicationService.IsPortOpen)
        {
            CommandCommunicationService.ClosePort();
        }
        else
        {
            CommandCommunicationService.OpenPort();
        }
        InvokeAsync(StateHasChanged);
    }
}