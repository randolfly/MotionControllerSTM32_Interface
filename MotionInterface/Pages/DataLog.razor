@page "/DataLog"
@using System.Windows
@using MotionInterface.Lib.Model
@using MotionInterface.Lib.Service
@using MotionInterface.Lib.Util
@using MotionInterface.Util

@inject IPopupService PopupService
@inject CommandCommunicationService CommandCommunicationService
@inject DataLogService DataLogService
@inject AppConfigService AppConfigService


<MCard Style="height:100%">
    <MTabs @bind-Value="_tabs" Centered Grow>
        <MTab>
            <MCol>
                <MIcon Icon="@("mdi-connection")"/>
                DataLog Config
            </MCol>
        </MTab>
        <MTab>
            <MCol>
                <MIcon Icon="@("mdi-content-save")"/>
                DataLog Operation
            </MCol>
        </MTab>
    </MTabs>

    <MTabsItems Value="_tabs">
        <MTabItem>
            <MCard Flat>
                <MCardText>
                    <MContainer>
                        <MRow>
                            <MCol Cols="12" Sm="6">
                                <MTextField @bind-Value="DataLogConfig.DataLogFolderName" Label="Folder"
                                            TValue="string">
                                </MTextField>
                            </MCol>
                            <MCol Cols="12" Sm="6">
                                <MTextField @bind-Value="DataLogConfig.DataLogFileName" Label="FileName"
                                            TValue="string">
                                </MTextField>
                            </MCol>
                            <MCol Cols="12"
                                  Sm="6">
                                <MSelect @bind-Value="DataLogConfig.DataExportTypes"
                                         Items="Enum.GetValues<DataExportTypes>().ToList()"
                                         Chips
                                         ItemText="u => u.ToString()"
                                         ItemValue="u => u"
                                         Label="DataExportType"
                                         Multiple>
                                </MSelect>
                            </MCol>
                        </MRow>
                    </MContainer>
                </MCardText>
            </MCard>

        </MTabItem>
        <MTabItem>
            <MCard Flat>
                <MCardText>
                    <MContainer>
                            <MRow Style="min-height:200px">
                                <MCol Cols="12" Md="6">
                                    <MCard Class="mx-auto">
                                        <MList Dense>
                                            <MListItemGroup @bind-Values="RecordSymbolName"
                                                            Multiple
                                                            Color="indigo">
                                                @foreach (var symbol in AvailableSymbolName)
                                                {
                                                    <MListItem @key="symbol" Value="symbol">
                                                        <MListItemContent>
                                                            <MListItemTitle>@symbol</MListItemTitle>
                                                        </MListItemContent>
                                                    </MListItem>
                                                }
                                            </MListItemGroup>
                                        </MList>
                                    </MCard>
                                </MCol>
                                <MCol Cols="12" Md="6">
                                    <MCard Class="mx-auto">
                                        <MList Dense>
                                            <MListItemGroup @bind-Values="GraphSymbolName"
                                                            Multiple
                                                            Color="indigo">
                                                @foreach (var symbol in RecordSymbolName)
                                                {
                                                    <MListItem @key="symbol" Value="symbol">
                                                        <MListItemContent>
                                                            <MListItemTitle>@symbol</MListItemTitle>
                                                        </MListItemContent>
                                                    </MListItem>
                                                }
                                            </MListItemGroup>
                                        </MList>
                                    </MCard>
                                </MCol>
                            </MRow>
                            <MRow NoGutters Style="margin-top: 10px;">
                                <MCol Cols="4" Style="display: flex;justify-content:space-around">
                                    <MButton Flat Dark
                                             OnClick="CommandCommunicationService.OpenPort">
                                        OpenCommandPort
                                    </MButton>
                                </MCol>
                                <MCol Cols="4" Style="display: flex;justify-content:space-around">
                                    <MButton Flat Dark
                                             OnClick="CommandCommunicationService.ClosePort">
                                        CloseCommandPort
                                    </MButton>
                                </MCol>
                                <MCol Cols="4" Style="display: flex;justify-content:space-around">
                                    <MButton Flat Dark
                                        OnClick="GetAvailableRecordDataNames">
                                        GetAvailable
                                    </MButton>
                                </MCol>
                                <MCol Cols="4" Style="display: flex;justify-content:space-around">
                                <MButton Flat Dark
                                    Color="primary" OnClick="SetRecordDataNames">
                                        SetRecord
                                    </MButton>
                                </MCol>
                                <MCol Cols="4" Style="display: flex;justify-content:space-around">
                                    <MButton Flat Dark 
                                        Color="primary" OnClick="StartRecordData">
                                        StartRecord
                                    </MButton>
                                </MCol>
                                <MCol Cols="4" Style="display: flex;justify-content:space-around">
                                <MButton Flat Dark
                                        Color="primary" OnClick="StopRecordData">
                                        StopRecord
                                    </MButton>
                                </MCol>
                            <MCol Cols="4" Class="d-flex justify-center">
                                <MButton Flat Dark Color="primary"
                                         OnClick="OnSaveConfig"
                                         Style="margin-right: 5px;">
                                    <MIcon Icon="@("mdi-content-save")" />
                                    Save Config
                                </MButton>
                            </MCol>
                            <MCol Cols="4" Class="d-flex justify-center">
                                <MButton Flat Dark Color="primary"
                                         OnClick="OnLoadConfig"
                                         Style="margin-right: 5px;">
                                    <MIcon Icon="@("mdi-upload")" />
                                    Load Config
                                </MButton>
                            </MCol>
                            </MRow>
                    </MContainer>
                </MCardText>
            </MCard>
        </MTabItem>
    </MTabsItems>
</MCard>

<MContainer Fluid Class="fill-height">
    
</MContainer>

@code {
    public StringNumber _tabs;
    private AppConfig AppConfig { get; set; }
    private DataLogConfig DataLogConfig { get; set; }

    private Dictionary<string, FigureViewWindow> FigureViewWindowDictionary { get; set; } = new();

    private List<string> AvailableSymbolName => CommandCommunicationService.AvailableSymbolName;

    private List<StringNumber> RecordSymbolName
    {
        get => CommandCommunicationService.RecordSymbolName.ToStringNumber();
        set => OnRecordSymbolChanged(value);
    }

    private void OnRecordSymbolChanged(List<StringNumber> symbolInfoPaths)
    {
        CommandCommunicationService.RecordSymbolName = symbolInfoPaths
            .Select(sn=>sn.ToString()).ToList()!;
        SaveAppConfig();
    }

    private List<StringNumber> GraphSymbolName
    {
        get => CommandCommunicationService.GraphSymbolName.ToStringNumber();
        set => OnGraphSymbolChanged(value);
    }

    private void OnGraphSymbolChanged(List<StringNumber> symbolInfoPaths) {
        CommandCommunicationService.GraphSymbolName = symbolInfoPaths
            .Select(sn => sn.ToString()).ToList()!;
        SaveAppConfig();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        DataLogService.OnParseFrameDataAction += UpdateGraphViewData;
        LoadAppConfig();
        PopupService.EnqueueSnackbarAsync("Initialized Finished!");
    }



    private void SetRecordDataNames()
    {
        if (CommandCommunicationService.IsPortOpen)
        {
            CommandCommunicationService.SetRecordDataNames();
        }
        else
        {
            PopupService.EnqueueSnackbarAsync("Please check if serial port is opened");
        }
        StateHasChanged();
    }

    private void GetAvailableRecordDataNames()
    {
        if (CommandCommunicationService.IsPortOpen)
        {
            CommandCommunicationService.GetAvailableRecordDataNames();
        }
        else
        {
            PopupService.EnqueueSnackbarAsync("Please check if serial port is opened"); 
        }

        StateHasChanged();
    }

    private void StartRecordData()
    {
        if (!CommandCommunicationService.IsPortOpen)
        {
            PopupService.EnqueueSnackbarAsync("Please check if serial port is opened"); 
            return;
        }
        // check echo record names right
        var recordName = CommandCommunicationService.RecordSymbolName;
        var echoName = CommandCommunicationService.EchoRecordSymbolName;
        var checkPass = true;
        if (recordName.Count == echoName.Count)
        {
            for (var i = 0;  i < recordName.Count; i++)
            {
                if (!string.Equals(recordName[i], echoName[i]))
                {
                    checkPass = false;
                    break;
                }
            }
        }
        if (checkPass)
        {
            if (recordName.Count <= 0) return;
            ClearRecordData();
            CommandCommunicationService.StartRecordData();
            ShowGraphView(CommandCommunicationService.GraphSymbolName);
            DataLogService.StartDataLog();
        }
        else
        {
            PopupService.EnqueueSnackbarAsync("Record and Echo Names not same");   
        }
        StateHasChanged();
    }

    private void ClearRecordData()
    {
        RecordSymbolName.Clear();
        FigureViewWindowDictionary.Values.ForEach(w => w.Close());
        FigureViewWindowDictionary.Clear();
    }

    private async void StopRecordData()
    {
        if (!CommandCommunicationService.IsPortOpen)
        {
            await PopupService.EnqueueSnackbarAsync("Please check if serial port is opened"); 
            return;
        }
        CommandCommunicationService.StopRecordData();
        DataLogService.StopDataLog();

        RecordSymbolName.Clear();
        foreach (var figureViewWindow in FigureViewWindowDictionary.Values)
        {
            figureViewWindow.ScaleRangeToMax();
        }

        foreach (var exportType in DataLogService.DataLogConfig.DataExportTypes)
        {
            await DataLogService.ExportLog(DataLogService.DataLogConfig.RecordFileFullName + "." + exportType, exportType);
        }
        StateHasChanged();
    }

    private void UpdateGraphViewData(int startId)
    {
        if (FigureViewWindowDictionary.Count == 0) return;
        var recordSymbolData = DataLogService.RecordData;
        var endId = recordSymbolData.Count;
        var recordSymbolList = CommandCommunicationService.RecordSymbolName;
        var graphSymbolList = CommandCommunicationService.GraphSymbolName;

        var graphSymbolIndex = recordSymbolList.FindSubStringListIndex(graphSymbolList);
        for (var graphSymbolId = 0;  graphSymbolId < graphSymbolList.Count; graphSymbolId++)
        {
            for (var numId = startId; numId < endId; numId++)
            {
                // problem: FigureViewWindowDictionary is 0 size?
                FigureViewWindowDictionary[graphSymbolList[graphSymbolId]]
                    .UpdateData(recordSymbolData[numId][graphSymbolId]);
            }
        }
    }

    private void ShowGraphView(List<string> graphSymbolInfos)
    {
        foreach (var figureViewWindow in FigureViewWindowDictionary.Values)
        {
            figureViewWindow.CloseWindow();
        }

        FigureViewWindowDictionary.Clear();
        for (var i = 0; i < graphSymbolInfos.Count; i++)
        {
            // todo: update all figure log period functions
            var symbolInfo = graphSymbolInfos[i];
            FigureViewWindow.LogPeriod = 1;
            var (left, top) = GetGraphViewWindowPos(i, graphSymbolInfos.Count);
            var figureViewWindow = new FigureViewWindow { Title = symbolInfo, Left = left, Top = top };
            FigureViewWindowDictionary.Add(symbolInfo, figureViewWindow);
            figureViewWindow.Show();
        }
    }

    private static (double x, double y) GetGraphViewWindowPos(int id, int windowNum, int windowWidth = 600,
        int windowHeight = 300)
    {
        const int windowRowSize = 3;
        var desktopWorkingArea = SystemParameters.WorkArea;
        var left = desktopWorkingArea.Right - ((int)(id / windowRowSize) + 1) * windowWidth;
        var top = desktopWorkingArea.Bottom - (id % windowRowSize + 1) * windowHeight;
        return (left, top);
    }


    private void OnLoadConfig() {
        if (!CommandCommunicationService.IsPortOpen) return;
        if (AvailableSymbolName.Count <= 0) return;
        AppConfigService.UpdateConfiguration();
        LoadAppConfig();

        RecordSymbolName = DataLogConfig.RecordSymbolName.Select(s=>s.ToStringNumber()).ToList();
        GraphSymbolName = DataLogConfig.GraphSymbolName.Select(s=>s.ToStringNumber()).ToList();

        StateHasChanged();
    }

    private void OnSaveConfig() {
        SaveAppConfig();
    }

    private void SaveAppConfig() {
        DataLogConfig.RecordSymbolName = RecordSymbolName.Select(s=>s.ToString()!).ToList();
        DataLogConfig.GraphSymbolName = GraphSymbolName.Select(s=>s.ToString()!).ToList();
        AppConfigService.SaveConfiguration(AppConfig);
        // PopupService.EnqueueSnackbarAsync("Save AppConfig");
    }

    private void LoadAppConfig() {
        AppConfig = AppConfigService.AppConfig;
        DataLogConfig = AppConfigService.AppConfig.DataLogConfig;
        PopupService.EnqueueSnackbarAsync("Load AppConfig");
    }

}